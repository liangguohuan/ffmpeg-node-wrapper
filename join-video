#!/usr/bin/env node
/*------------------------------------------------------------------------------
| File: join-video
| Description: This is a shell script for spliting video via ffmpeg.
| Author: hanson <liangguohaun@gmail.com>
| Github: https://github.com/liangguohaun
| Last Modified: 2016-11-05 18:00
|-------------------------------------------------------------------------------
*/

// require libs
var fs = require('fs');
var path = require('path');
var process = require('process');
var printf = require('printf');
var moment = require('moment');
var ffmpeg = require('fluent-ffmpeg');
var exec = require('child_process').exec;
var glob = require('glob');
var yargs = require('yargs');

var log4js = require('log4js');
var log4js_config = require("./log4js.json");

// Warn: log to file will fail if process.exit() exec.
// config log4js
log4js.configure(log4js_config);
var logger = log4js.getLogger('console');


// shell argv define
var _helpmsg = `
This is a shell script file for joining videos via ffmpeg.
Usage:
  $0 [inputfile ...] ...`;
var argv = yargs.usage(_helpmsg)
  .options({
    't': {
      alias: 'test',
      describe: 'print info but do not run',
      type: 'boolean'
    },
    'i': {
      alias: 'inputfile',
      describe: 'inputfile to be split.',
      type: 'array'
    },
    'd': {
      alias: 'inputdir',
      describe: 'the dir for searching inputfile, ignore option "-i"',
      type: 'string'
    },
    'c': {
      alias: 'copy',
      describe: 'copy mode, faster, by default',
      type: 'boolean',
      default: true
    },
    's': {
      alias: 'size',
      describe: 'outputfile size: 640x360',
      type: 'string'
    },
    'b': {
      alias: 'bitrate',
      describe: 'video bitrate: 1024k',
      type: 'string'
    },
    'B': {
      alias: 'abitrate',
      describe: 'audio bitrate: 128k',
      type: 'string'
    },
    'r': {
      alias: 'rate',
      describe: 'video framerate: 29.7',
      type: 'string'
    },
    'l': {
      alias: 'aspect',
      describe: 'set output frame aspect ratio: "4:3" or "1.3333"',
      type: 'string'
    },
    'a': {
      alias: 'autopad',
      describe: 'enable auto-padding the output video',
      type: 'boolean'
    },
    'o': {
      alias: 'outputfile',
      describe: 'specifies the outputfile',
      type: 'string'
    },
    'p': {
      alias: 'path',
      describe: 'output path',
      type: 'string',
      default: '/tmp/output'
    }
  })
  .alias('h', 'help')
  .help('h')
  .argv;

// show help without any param
if (process.argv.length === 2) {
  yargs.showHelp();
  process.exit();
}

// init variables
var tempdir = '/tmp/fulent_temp';
var debug      = argv.t;
var inputfiles = argv.i === undefined ? argv._ : argv.i;
var inputdir   = argv.d;
var copy       = argv.c;
var size       = argv.s;
var bitrate    = argv.b;
var abitrate   = argv.B;
var rate       = argv.r;
var aspect     = argv.l;
var autopad    = argv.a;
var outputfile = argv.o;
var output     = argv.p;

// if set param --inputdir
if (inputdir !== undefined) {
  inputfiles = glob.sync(path.join(inputdir, '*'));
}

// debug mode
if (debug) { logger.debug(argv); }
// process.exit();

if (inputfiles.length < 2) {
  logger.error('inputfiles error, must be more then two inputfile');
  process.exit(1);
}

// outputfile handle
if (outputfile === undefined) {
  var firstinputfile = inputfiles[0];
  var basename = path.basename(firstinputfile);
  var extname = path.extname(firstinputfile);
  var outputfile = output + '/' + basename.replace( extname, printf('-%s-all%s', moment().format('X'), extname) );
}

// create ouput dir if it doesnt exists
if (!fs.existsSync(output + '')) {
  fs.mkdir(output);
}

if (copy === true) {
  inputfiles = inputfiles.map(function(item) {
    return printf("file '%s'", path.resolve(item));
  });
  // will overwrite outputfile if outputfile already exists
  var cmd = printf('yes | ffmpeg -f concat -safe 0 -i <(echo -e "%s") -c copy %s', inputfiles.join('\n'), outputfile);
  debug && logger.debug(cmd);
  debug && process.exit();
  exec(cmd, {"shell":"/bin/bash"}, function(err, stdout, stderr) {
    if (err) { logger.error(err); }
    logger.info('Merging finished !');
    logger.info('outputfile: %s', outputfile);
  });
} else {
  var ffmpeg = ffmpeg();
  inputfiles.forEach(function(item, i) {
    ffmpeg.addInput(item);
  });

  if (size     !== undefined) { ffmpeg.size(size); }
  if (bitrate  !== undefined) { ffmpeg.videoBitrate(bitrate); }
  if (abitrate !== undefined) { ffmpeg.audioBitrate(abitrate); }
  if (rate     !== undefined) { ffmpeg.inputFPS(rate); }
  if (aspect   !== undefined) { ffmpeg.aspect(aspect); }
  if (autopad  !== undefined) { ffmpeg.autopad(autopad); }

  // events listener
  ffmpeg
    .on('start', function(commandLine) {
      debug && logger.debug(commandLine);
      debug && process.exit();
    })
    .on('error', function(err) {
      logger.error('An error occurred: ' + err.message);
    })
    .on('end', function() {
      logger.info('Merging finished !');
      logger.info('outputfile: %s' % outputfile);
    })
    .mergeToFile(outputfile, tempdir);
}


// vim: filetype=javascript syntax=javascript fdm=syntax ts=2 sw=2 sts=2 expandtab
