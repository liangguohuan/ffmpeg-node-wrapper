#!/usr/bin/env node
/*------------------------------------------------------------------------------
| File: split-video
| Description: This is a shell script for spliting video via ffmpeg.
| Author: hanson <liangguohaun@gmail.com>
| Github: https://github.com/liangguohaun
| Last Modified: 2016-11-05 18:00
|-------------------------------------------------------------------------------
*/

// require libs
var fs = require('fs');
var path = require('path');
var process = require('process');
var exec = require('child_process').exec;
var printf = require('printf');
var moment = require('moment');
var ffmpeg = require('fluent-ffmpeg');
var yargs = require('yargs');
var log4js = require('log4js');
var log4js_config = require("./log4js.json");

// Warn: log to file will fail if process.exit() exec.
// config log4js
log4js.configure(log4js_config);
var logger = log4js.getLogger('console');


// shell argv define
var _helpmsg = `
This is a shell script file for spliting video via ffmpeg
Usage:
  $0 [inputfile] [starttime] [endtime] ...`;
var argv = yargs.usage(_helpmsg)
  .options({
    't': {
      alias: 'test',
      describe: 'print info but do not run',
      type: 'boolean'
    },
    'i': {
      alias: 'inputfile',
      describe: 'inputfile to be split',
      type: 'string'
    },
    's': {
      alias: 'starttime',
      describe: 'split from time, format: [hh:mm:ss]',
      type: 'string',
      default: '00:00:00',
    },
    'e': {
      alias: 'endtime',
      describe: 'split end time, format:  [hh:mm:ss]',
      type: 'string',
      default: '10:00:00',
    },
    'o': {
      alias: 'outputfile',
      describe: 'specifies the outputfile',
      type: 'string'
    },
    'p': {
      alias: 'path',
      describe: 'outputfile path',
      type: 'string',
      default: '/tmp/output'
    },
    'a': {
      alias: 'samedir',
      describe: 'auto rename outputfile in the same dir',
      type: 'boolean'
    }
  })
  .alias('h', 'help')
  .help('h')
  .argv;

// show help without any param
if (process.argv.length === 2) {
  yargs.showHelp();
  process.exit();
}

// init variables
var debug      = argv.t;
var inputfile  = argv._[0] !== undefined ? argv._[0] : argv.i;
var st         = argv._[1] !== undefined ? argv._[1] : argv.s;
var se         = argv._[2] !== undefined ? argv._[2] : argv.e;
var samedir    = argv.a;
var output     = argv.p;
var outputfile = argv.o;

// debug mode
if (debug) { logger.debug(argv); }

// check inputfile exists
if (!fs.existsSync(inputfile + '')) {
  logger.error('inputfile doesnt exists!!');
  process.exit(1);
}

// outputfile handle
if (samedir) {
  var output = path.dirname(inputfile);
  var extname = path.extname(inputfile);
  var outputfile = inputfile.replace( extname, printf('-%s-temp%s', moment().format('X'), extname) );
} else if (outputfile === undefined) {
  var basename = path.basename(inputfile);
  var outputfile = output + '/' + basename;
} else {
  var output = path.dirname(outputfile);
}

// create ouput dir if it doesnt exists
if (!fs.existsSync(output + '')) {
  fs.mkdir(output);
}

// count the duration via starttime and endtime 
var dura = moment.duration( moment.duration(se) - moment.duration(st) ).as('second');
var cmd = printf('ffmpeg -i "%s" -ss %s -t %s -c copy -avoid_negative_ts 1 "%s" -y', inputfile, st, dura, outputfile);

debug && logger.debug(cmd);
debug && process.exit();
exec(cmd, {"shell":"/bin/bash"}, function(err, stdout, stderr) {
  if (err) { logger.error(err); }
  logger.info('Successed!');
  logger.info('outputfile: %s', outputfile);
});

// main code
// ffmpeg(inputfile)
  // .outputOptions('-avoid_negative_ts 1')
  // .audioCodec('copy')
  // .videoCodec('copy')
  // .on('start', function(commandLine) {
    // debug && logger.debug(commandLine);
    // debug && process.exit();
  // })
  // .on('end', function(stdout, stderr) {
    // logger.info( 'Successed!' );
    // logger.info( 'outputfile: %s', outputfile);
  // })
  // .setStartTime(st)
  // .setDuration(dura)
  // .save( outputfile );


// vim: filetype=javascript syntax=javascript fdm=syntax ts=2 sw=2 sts=2 expandtab
